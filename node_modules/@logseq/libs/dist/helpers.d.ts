/// <reference types="node" />
import { SettingSchemaDesc, StyleString, UIOptions } from './LSPlugin';
import { PluginLocal } from './LSPlugin.core';
import * as nodePath from 'path';
import { snakeCase } from 'snake-case';
import EventEmitter from 'eventemitter3';
declare global {
    interface Window {
        api: any;
        apis: any;
    }
}
export declare const path: nodePath.PlatformPath;
export declare const IS_DEV: boolean;
export declare const PROTOCOL_FILE = "file://";
export declare const PROTOCOL_LSP = "lsp://";
export declare const URL_LSP: string;
export declare const safeSnakeCase: typeof snakeCase;
export declare function getAppPathRoot(): Promise<string>;
export declare function getSDKPathRoot(): Promise<string>;
export declare function isObject(item: any): boolean;
export declare function deepMerge<T>(a: Partial<T>, b: Partial<T>): T;
export declare class PluginLogger extends EventEmitter<'change'> {
    private _tag?;
    private _opts?;
    private _logs;
    constructor(_tag?: string, _opts?: {
        console: boolean;
    });
    write(type: string, payload: any[], inConsole?: boolean): void;
    clear(): void;
    info(...args: any[]): void;
    error(...args: any[]): void;
    warn(...args: any[]): void;
    setTag(s: string): void;
    toJSON(): [type: string, payload: any][];
}
export declare function isValidUUID(s: string): boolean;
export declare function genID(): string;
export declare function ucFirst(str: string): string;
export declare function withFileProtocol(path: string): string;
export declare function safetyPathJoin(basePath: string, ...parts: Array<string>): string;
export declare function safetyPathNormalize(basePath: string): string;
/**
 * @param timeout milliseconds
 * @param tag string
 */
export declare function deferred<T = any>(timeout?: number, tag?: string): {
    created: number;
    setTag: (t: string) => string;
    resolve: any;
    reject: any;
    promise: Promise<T>;
    readonly settled: boolean;
};
export declare function invokeHostExportedApi(method: string, ...args: Array<any>): any;
export declare function setupIframeSandbox(props: Record<string, any>, target: HTMLElement): () => Promise<void>;
export declare function setupInjectedStyle(style: StyleString, attrs: Record<string, any>): () => void;
export declare function setupInjectedUI(this: PluginLocal, ui: UIOptions, attrs: Record<string, string>, initialCallback?: (e: {
    el: HTMLElement;
    float: boolean;
}) => void): false | (() => void);
export declare function cleanInjectedUI(id: string): void;
export declare function cleanInjectedScripts(this: PluginLocal): void;
export declare function transformableEvent(target: HTMLElement, e: Event): any;
export declare function injectTheme(url: string): () => void;
export declare function mergeSettingsWithSchema(settings: Record<string, any>, schema: Array<SettingSchemaDesc>): Record<string, any>;
export declare function normalizeKeyStr(s: string): string;
