"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const promises_1 = require("fs/promises");
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const magic_string_1 = __importDefault(require("magic-string"));
const http_1 = require("http");
const pluginName = "vite:logseq-dev-plugin";
function getLogseqPluginId() {
    try {
        const packageJson = fs_1.default.readFileSync(path_1.default.join(process.cwd(), "package.json"), "utf-8");
        return JSON.parse(packageJson).logseq.id;
    }
    catch (err) {
        console.error(`${pluginName}: failed to get valid plugin id`);
    }
}
const reloadScript = `
(() => {
  try {
    let name = logseq.api.get_current_page().originalName;
    console.log(name)
    logseq.api.replace_state("home");
    logseq.api.replace_state("page", { name });
  } catch (err) {
    console.warn('failed to re-render current page', err);
  }
})();`;
// TODO: support https?
const request = async (url, options) => {
    let resolve;
    let data = [];
    let promise = new Promise((res) => {
        resolve = res;
    });
    (0, http_1.get)(url, options, (res) => {
        res.on("data", (chunk) => {
            data.push(chunk);
        });
        res.on("end", () => {
            resolve(Buffer.concat(data).toString());
        });
    });
    return promise;
};
const logseqDevPlugin = () => {
    let config;
    let configEnv;
    let server;
    const pluginId = getLogseqPluginId();
    // eagerly load the HTML file to let it write to the dist
    const tapHtml = async (address) => {
        const res = await request(address, {
            method: "GET",
            headers: {
                accept: "text/html",
            },
        });
        return res;
    };
    return {
        name: pluginName,
        enforce: "post",
        config: async (config, resolvedEnv) => {
            configEnv = resolvedEnv;
            // make sure base is empty, otherwise when running in build mode
            // the asset will be served from the root "/"
            config.base = "";
            // Plugin works in file://, but it fetches vite resources from localhost
            // thus we must turn on cors
            if (resolvedEnv.command === "serve") {
                config.server = Object.assign({}, config.server, {
                    cors: true,
                    // I think we do not need to concern about this ...
                    host: "localhost",
                    hmr: {
                        host: "localhost",
                    },
                    // There is no point to open the index.html
                    open: false
                });
            }
            return config;
        },
        configureServer(_server) {
            server = _server;
        },
        configResolved(resolvedConfig) {
            // store the resolved config
            config = resolvedConfig;
        },
        transform(code, id) {
            var _a;
            if (((_a = server === null || server === void 0 ? void 0 : server.moduleGraph.getModuleById(id)) === null || _a === void 0 ? void 0 : _a.importers.size) === 0 &&
                !/node_modules/.test(id) &&
                id.startsWith(process.cwd())) {
                const s = new magic_string_1.default(code);
                s.prepend(`
if (import.meta.hot) {
  import.meta.hot.accept(() => {});
  import.meta.hot.dispose(() => {
    top?.LSPluginCore.reload("${pluginId}");
    console.log("✨Plugin ${pluginId} reloaded ✨");
    // TODO: trigger re-render globally
  });
}\n\n`);
                s.append(`
if (import.meta.hot) {
  setTimeout(() => {
    top.eval(\`${reloadScript}\`);
  });
}\n`);
                // amend entries
                return {
                    code: s.toString(),
                    map: s.generateMap({ hires: true }),
                };
            }
        },
        // Overwrite dev HTML
        async buildStart() {
            if (configEnv.command === "serve" && server) {
                if (!server.httpServer) {
                    throw new Error(`${pluginName} Only works for non-middleware mode for now`);
                }
                server.httpServer.once("listening", () => {
                    let address = server.httpServer.address();
                    if (typeof address === "object" && address) {
                        address = "http://localhost" + ":" + address.port;
                    }
                    tapHtml(address).then(async (html) => {
                        // Rewrite the base, otherwise assets like `/@vite/client` will
                        // subject to default `file://` path
                        const baseHref = address;
                        const baseString = `<base href="${baseHref}">`;
                        const htmlWithBase = html.replace(`<head>`, `<head>${baseString}`);
                        await (0, promises_1.mkdir)(config.build.outDir, { recursive: true });
                        await (0, promises_1.writeFile)(path_1.default.resolve(config.build.outDir, "index.html"), htmlWithBase, {
                            encoding: "utf-8",
                        });
                        console.info(`${pluginName}: Wrote development index.html`);
                    });
                });
            }
        },
    };
};
exports.default = logseqDevPlugin;
//# sourceMappingURL=index.js.map